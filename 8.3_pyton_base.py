# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.
my_list = []


class Only_numbers(Exception):
    def __init__(self, txt):
        self.txt = txt

while True:
    try:
        value = input('input number for add list or q for quit : ')
        if value == 'q':
            print(my_list)
            break

        if value.isdigit():
            my_list.append(int(value))
        else:
            # not value.isdigit():
            raise Only_numbers("\033[1m\033[31m{}\033[0m".format('error input => must Only_numbers'))
    except (ValueError, Only_numbers) as err_input:
        print(err_input)
        value = input('input number for add list or q for quit : ')
        my_list.append(int(value))


